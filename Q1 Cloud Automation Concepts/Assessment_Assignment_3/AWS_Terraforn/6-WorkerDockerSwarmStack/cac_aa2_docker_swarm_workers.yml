#   8 888888888o.      8 8888888888     d888888o.       ,o888888o.    8 888888888o.    8 8888 8 888888888o 8888888 8888888888  8 8888     ,o888888o.     b.             8
#   8 8888    `^888.   8 8888         .`8888:' `88.    8888     `88.  8 8888    `88.   8 8888 8 8888    `88.     8 8888        8 8888  . 8888     `88.   888o.          8
#   8 8888        `88. 8 8888         8.`8888.   Y8 ,8 8888       `8. 8 8888     `88   8 8888 8 8888     `88     8 8888        8 8888 ,8 8888       `8b  Y88888o.       8
#   8 8888         `88 8 8888         `8.`8888.     88 8888           8 8888     ,88   8 8888 8 8888     ,88     8 8888        8 8888 88 8888        `8b .`Y888888o.    8
#   8 8888          88 8 888888888888  `8.`8888.    88 8888           8 8888.   ,88'   8 8888 8 8888.   ,88'     8 8888        8 8888 88 8888         88 8o. `Y888888o. 8
#   8 8888          88 8 8888           `8.`8888.   88 8888           8 888888888P'    8 8888 8 888888888P'      8 8888        8 8888 88 8888         88 8`Y8o. `Y88888o8
#   8 8888         ,88 8 8888            `8.`8888.  88 8888           8 8888`8b        8 8888 8 8888             8 8888        8 8888 88 8888        ,8P 8   `Y8o. `Y8888
#   8 8888        ,88' 8 8888        8b   `8.`8888. `8 8888       .8' 8 8888 `8b.      8 8888 8 8888             8 8888        8 8888 `8 8888       ,8P  8      `Y8o. `Y8
#   8 8888    ,o88P'   8 8888        `8b.  ;8.`8888    8888     ,88'  8 8888   `8b.    8 8888 8 8888             8 8888        8 8888  ` 8888     ,88'   8         `Y8o.`
#   8 888888888P'      8 888888888888 `Y8888P ,88P'     `8888888P'    8 8888     `88.  8 8888 8 8888             8 8888        8 8888     `8888888P'     8            `Yo
Description: This is Stack 04 of Cloud Engineering\Cloud Automation Concepts\Assessment 01 | DockerSwarmWorkersStack | Fill in










#   8 888888888o      .8.          8 888888888o.            .8.                   ,8.       ,8.          8 8888888888 8888888 8888888888 8 8888888888   8 888888888o.     d888888o.
#   8 8888    `88.   .888.         8 8888    `88.          .888.                 ,888.     ,888.         8 8888             8 8888       8 8888         8 8888    `88.  .`8888:' `88.
#   8 8888     `88  :88888.        8 8888     `88         :88888.               .`8888.   .`8888.        8 8888             8 8888       8 8888         8 8888     `88  8.`8888.   Y8
#   8 8888     ,88 . `88888.       8 8888     ,88        . `88888.             ,8.`8888. ,8.`8888.       8 8888             8 8888       8 8888         8 8888     ,88  `8.`8888.
#   8 8888.   ,88'.8. `88888.      8 8888.   ,88'       .8. `88888.           ,8'8.`8888,8^8.`8888.      8 888888888888     8 8888       8 888888888888 8 8888.   ,88'   `8.`8888.
#   8 888888888P'.8`8. `88888.     8 888888888P'       .8`8. `88888.         ,8' `8.`8888' `8.`8888.     8 8888             8 8888       8 8888         8 888888888P'     `8.`8888.
#   8 8888      .8' `8. `88888.    8 8888`8b          .8' `8. `88888.       ,8'   `8.`88'   `8.`8888.    8 8888             8 8888       8 8888         8 8888`8b          `8.`8888.
#   8 8888     .8'   `8. `88888.   8 8888 `8b.       .8'   `8. `88888.     ,8'     `8.`'     `8.`8888.   8 8888             8 8888       8 8888         8 8888 `8b.    8b   `8.`8888.
#   8 8888    .888888888. `88888.  8 8888   `8b.    .888888888. `88888.   ,8'       `8        `8.`8888.  8 8888             8 8888       8 8888         8 8888   `8b.  `8b.  ;8.`8888
#   8 8888   .8'       `8. `88888. 8 8888     `88. .8'       `8. `88888. ,8'         `         `8.`8888. 8 888888888888     8 8888       8 888888888888 8 8888     `88. `Y8888P ,88P'
Parameters:

  AWSAccessKeyId:
    Description: Please enter
    Type: String
    AllowedPattern: ".+"
  AWSSecretAccessKey:
    Description: Please enter
    Type: String
    AllowedPattern: ".+"
  AWSSessionToken:
    Description: Please enter
    Type: String
    AllowedPattern: ".+"









    #   8 888888888o.   8 8888888888     d888888o.       ,o888888o.     8 8888      88 8 888888888o.      ,o888888o.    8 8888888888     d888888o.
    #   8 8888    `88.  8 8888         .`8888:' `88.  . 8888     `88.   8 8888      88 8 8888    `88.    8888     `88.  8 8888         .`8888:' `88.
    #   8 8888     `88  8 8888         8.`8888.   Y8 ,8 8888       `8b  8 8888      88 8 8888     `88 ,8 8888       `8. 8 8888         8.`8888.   Y8
    #   8 8888     ,88  8 8888         `8.`8888.     88 8888        `8b 8 8888      88 8 8888     ,88 88 8888           8 8888         `8.`8888.
    #   8 8888.   ,88'  8 888888888888  `8.`8888.    88 8888         88 8 8888      88 8 8888.   ,88' 88 8888           8 888888888888  `8.`8888.
    #   8 888888888P'   8 8888           `8.`8888.   88 8888         88 8 8888      88 8 888888888P'  88 8888           8 8888           `8.`8888.
    #   8 8888`8b       8 8888            `8.`8888.  88 8888        ,8P 8 8888      88 8 8888`8b      88 8888           8 8888            `8.`8888.
    #   8 8888 `8b.     8 8888        8b   `8.`8888. `8 8888       ,8P  ` 8888     ,8P 8 8888 `8b.    `8 8888       .8' 8 8888        8b   `8.`8888.
    #   8 8888   `8b.   8 8888        `8b.  ;8.`8888  ` 8888     ,88'     8888   ,d8P  8 8888   `8b.     8888     ,88'  8 8888        `8b.  ;8.`8888
    #   8 8888     `88. 8 888888888888 `Y8888P ,88P'     `8888888P'        `Y88888P'   8 8888     `88.    `8888888P'    8 888888888888 `Y8888P ,88P'
Resources:

  #DO = Dependent on
  #Par = Parameter
  #Imp = Imported parameter

  CACAA2WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This security groups allows incoming connections to ports 80 (HTTP), 443 (HTTPS), 22 (SSH)
      GroupName: CACAA2WebSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000 # this port will be used for test purposes to access the NHS registration form running in a Docker container
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue BaseStack:VPC                                   #Imp: BaseStack:VPC                       (The VPC imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA2WebSecurityGroup
    

  # Fix the comments (they are copy pasted from assignment 1)

  #Description: This is a Load Balancer, this is connected to the two Public subnets and load balances the auto scaled Docker workers in the public subnets.
  CACAA2CovidDashboardELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: CACAA2CovidDashboardELB
      Type: application
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref CACAA2WebSecurityGroup                                     #DO: CACAA2WebSecurityGroup               (The security group for the Webservers)
      Subnets: 
        - !ImportValue BaseStack:PublicSubnet1                            #Imp: BaseStack:PublicSubnet1             (The first public subnet imported from the BaseStack)
        - !ImportValue BaseStack:PublicSubnet2                            #Imp: BaseStack:PublicSubnet2             (The second public subnet imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA2CovidDashboardELB

  #Description: This is a Load Balancer Target group, this is used by the load balancer HTTP listener and allows sets it up to received HTTP requests over port 80.
  CACAA2CovidDashboardTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CACAA2CovidDashboardTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue BaseStack:VPC                                   #Imp: BaseStack:VPC                       (The VPC imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA2CovidDashboardTargetGroup

  #Description: This is a Load Balancer listener, this receives the HTTP requests sent to the webservers via the load balancers DNS name and gives it to the Load balancer.
  CACAA2CovidDashboardListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref CACAA2CovidDashboardTargetGroup                          #DO: CACAA2CovidDashboardTargetGroup                    (The Load balancer Target group)
      LoadBalancerArn: !Ref CACAA2CovidDashboardELB                                     #DO: CACAA2CovidDashboardELB                            (The Load balancer)
      Port: 80
      Protocol: HTTP

  CACAA2CovidFormELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: CACAA2CovidFormELB
      Type: network
      Scheme: internet-facing
      Subnets: 
        - !ImportValue BaseStack:PublicSubnet1                            #Imp: BaseStack:PublicSubnet1             (The first public subnet imported from the BaseStack)
        - !ImportValue BaseStack:PublicSubnet2                            #Imp: BaseStack:PublicSubnet2             (The second public subnet imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA2CovidFormELB

  #Description: This is a Load Balancer Target group, this is used by the load balancer HTTP listener and allows sets it up to received HTTP requests over port 80.
  CACAA2CovidFormTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CACAA2CovidDashboardTargetGroup
      Port: 5000
      Protocol: TCP
      VpcId: !ImportValue BaseStack:VPC                                   #Imp: BaseStack:VPC                       (The VPC imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA2CovidFormTargetGroup

  CACAA2CovidFormListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref CACAA2CovidFormTargetGroup                          
      LoadBalancerArn: !Ref CACAA2CovidFormELB                                     
      Port: 5000
      Protocol: TCP


  #Description: This is the autoscaler launch configuration, that is used by the Autoscaler to set up the webservers in the two public subnets which will host the website, 
  #             will be accessed through the load balancer and will be supported by the database.
  CACAA2DockerSwarmWorkerLaunchConfiguration: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0817d428a6fb68645 # Ubuntu 18.04
      InstanceMonitoring: false # basic monitoring enabled
      InstanceType: t2.micro # For production change this to t3.large
      KeyName: CAC_Assignments
      LaunchConfigurationName: CACAA2DockerSwarmWorkerLaunchConfiguration
      PlacementTenancy: default
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 30
            VolumeType: "gp2"
      SecurityGroups: 
        - !Ref CACAA2WebSecurityGroup                                     #DO: CACAA2WebSecurityGroup               (The security group for the Webservers)
      
      # After pulling the images from the ECR we join the Docker Swarm cluster which automatically orders to run all the necessary serviced in the stack (Covid Dashbord and Covid Registration Form)
      UserData:
        Fn::Base64:
          !Sub 
          - |
              #!/bin/bash
              cd ~
              echo ${CovidDataAPIEndpointURL} >> apiEndpoint
              sudo apt-get update && sudo apt-get upgrade -y
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
              sudo apt update
              sudo apt install -y docker-ce
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo apt-get install awscli -y
              aws configure set region us-east-1
              aws configure set output json
              aws configure set aws_access_key_id ${AWSAccessKeyId}
              aws configure set aws_secret_access_key ${AWSSecretAccessKey}
              aws configure set aws_session_token ${AWSSessionToken}
              sudo aws ecr get-login --no-include-email --region us-east-1 | sed -e 's/-e none//' | sudo bash
              sudo docker pull ${CovidDashboardECRUrl}
              sudo docker pull ${CovidRegistrationFormECRUrl}

              aws dynamodb get-item --table-name docker-swarm-join-token --key '{"id":{"N":"1"}}' >> token.json
              sudo apt-get install jq -y
              JOIN_TOKEN=$(jq -r '.Item.token.S' token.json)  
              sudo docker swarm join --token $JOIN_TOKEN ${SwarmMasterPrivateIp}:2377

              mkdir ~/automation
              touch ~/automation/cron-reauth-covid-services-pull.sh
              cd ~/automation
              echo '#!/bin/bash' >> cron-reauth-covid-services-pull.sh
              echo 'aws ecr get-login --no-include-email --region us-east-1 | sed -e "s/-e none//" | sudo bash' >> cron-reauth-covid-services-pull.sh
              echo 'docker pull ${CovidDashboardECRUrl}' >> cron-reauth-covid-services-pull.sh
              echo 'docker pull ${CovidRegistrationFormECRUrl}' >> cron-reauth-covid-services-pull.sh
              (crontab -l 2>/dev/null; echo "5 2 * * * ~/automation/cron-reauth-covid-services-pull.sh") | crontab -

          - CovidDataAPIEndpointURL:
              Fn::ImportValue:
                DataLayerStack:CovidDataAPIEndpointURL                    #Imp: DataLayerStack:CovidDataAPIEndpointURL  (The API endpoint URL imported from the DataLayerStack)
            CovidDashboardECRUrl:
              Fn::ImportValue:
                ECRStack:CovidDashboardECRUrl
            CovidRegistrationFormECRUrl:
              Fn::ImportValue:
                ECRStack:CovidRegistrationFormECRUrl
            SwarmMasterPrivateIp:
              Fn::ImportValue:
                DockerSwarmMasterStack:BuildServerPrivateIp




  #Description: This is the autoscaler that is in the end responsible for the setting up of the webservers in two availability zones and scaling, the amount of webservers 
  #             scaled will depend on expected demand, with two AutoScaling ScheduledActions responsible for the scaling.
  CACAA2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref CACAA2DockerSwarmWorkerLaunchConfiguration    #DO: CACAA2WebserverLaunchConfiguration   (The Launch Configuration for the AutoScaler group to settup the webservers)
      MinSize: 2
      MaxSize: 6
      TargetGroupARNs: 
        - !Ref CACAA2CovidDashboardTargetGroup                                          #DO: CACAA2CovidDashboardTargetGroup                    (The Load balancer Target group)
      VPCZoneIdentifier:
        - !ImportValue BaseStack:PublicSubnet1                            #Imp: BaseStack:PublicSubnet1             (The first public subnet imported from the BaseStack)
        - !ImportValue BaseStack:PublicSubnet2                            #Imp: BaseStack:PublicSubnet2             (The second public subnet imported from the BaseStack)
      Tags:
        - Key: Name
          Value: BroadWebWorkers
          PropagateAtLaunch: true 





  #Description: This is a AutoScaling ScheduledAction, this is used to make the autoscaler scale out (expand capacity) from 6pm Eastern time following expected demand.
  CACAA2AutoscalingScheduledActionOut:
    Type: AWS::AutoScaling::ScheduledAction
    Properties: 
      AutoScalingGroupName: !Ref CACAA2AutoScalingGroup                   #DO: CACAA2AutoScalingGroup               (The AutoScalingGroup responsible for scaling the webserver)
      DesiredCapacity: 6
      MaxSize: 6
      MinSize: 2
      Recurrence: "0 22 * * *" # AWS uses UTC time, 18:00 Eastern time -> 22:00 UTC | Everyday scale out from 18:00

  #Description: This is a AutoScaling ScheduledAction, this is used to make the autoscaler scale in (decrease capacity) from 8pm Eastern time following expected demand.
  CACAA2AutoscalingScheduledActionIn:
    Type: AWS::AutoScaling::ScheduledAction
    Properties: 
      AutoScalingGroupName: !Ref CACAA2AutoScalingGroup                   #DO: CACAA2AutoScalingGroup               (The AutoScalingGroup responsible for scaling the webserver)
      DesiredCapacity: 2
      MaxSize: 2
      MinSize: 2
      Recurrence: "0 0 * * *" # AWS uses UTC time, 20:00 Eastern time -> 00:00 UTC | Everyday scale in from 20:00

  








                                                                                                              
#       ,o888888o.     8 8888      88 8888888 8888888888 8 888888888o   8 8888      88 8888888 8888888888 d888888o.   
#    . 8888     `88.   8 8888      88       8 8888       8 8888    `88. 8 8888      88       8 8888     .`8888:' `88. 
#   ,8 8888       `8b  8 8888      88       8 8888       8 8888     `88 8 8888      88       8 8888     8.`8888.   Y8 
#   88 8888        `8b 8 8888      88       8 8888       8 8888     ,88 8 8888      88       8 8888     `8.`8888.     
#   88 8888         88 8 8888      88       8 8888       8 8888.   ,88' 8 8888      88       8 8888      `8.`8888.    
#   88 8888         88 8 8888      88       8 8888       8 888888888P'  8 8888      88       8 8888       `8.`8888.   
#   88 8888        ,8P 8 8888      88       8 8888       8 8888         8 8888      88       8 8888        `8.`8888.  
#   `8 8888       ,8P  ` 8888     ,8P       8 8888       8 8888         ` 8888     ,8P       8 8888    8b   `8.`8888. 
#    ` 8888     ,88'     8888   ,d8P        8 8888       8 8888           8888   ,d8P        8 8888    `8b.  ;8.`8888 
#       `8888888P'        `Y88888P'         8 8888       8 8888            `Y88888P'         8 8888     `Y8888P ,88P' 
Outputs:

  WebWorkersCovidDashboardLoadBalancerURL:
    Description: Reference to the DNS Name of the ELB for Covid Dashboard
    Value: !GetAtt CACAA2CovidDashboardELB.DNSName
    Export:
      Name: DockerSwarmWorkersStack:WebWorkersCovidDashboardLoadBalancerURL
  WebWorkersCovidFormLoadBalancerURL:
    Description: Reference to the DNS Name of the ELB for Covid Registration Form
    Value: !GetAtt CACAA2CovidFormELB.DNSName
    Export:
      Name: DockerSwarmWorkersStack:WebWorkersCovidFormLoadBalancerURL

