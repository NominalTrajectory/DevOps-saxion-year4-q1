#   8 888888888o.      8 8888888888     d888888o.       ,o888888o.    8 888888888o.    8 8888 8 888888888o 8888888 8888888888  8 8888     ,o888888o.     b.             8
#   8 8888    `^888.   8 8888         .`8888:' `88.    8888     `88.  8 8888    `88.   8 8888 8 8888    `88.     8 8888        8 8888  . 8888     `88.   888o.          8
#   8 8888        `88. 8 8888         8.`8888.   Y8 ,8 8888       `8. 8 8888     `88   8 8888 8 8888     `88     8 8888        8 8888 ,8 8888       `8b  Y88888o.       8
#   8 8888         `88 8 8888         `8.`8888.     88 8888           8 8888     ,88   8 8888 8 8888     ,88     8 8888        8 8888 88 8888        `8b .`Y888888o.    8
#   8 8888          88 8 888888888888  `8.`8888.    88 8888           8 8888.   ,88'   8 8888 8 8888.   ,88'     8 8888        8 8888 88 8888         88 8o. `Y888888o. 8
#   8 8888          88 8 8888           `8.`8888.   88 8888           8 888888888P'    8 8888 8 888888888P'      8 8888        8 8888 88 8888         88 8`Y8o. `Y88888o8
#   8 8888         ,88 8 8888            `8.`8888.  88 8888           8 8888`8b        8 8888 8 8888             8 8888        8 8888 88 8888        ,8P 8   `Y8o. `Y8888
#   8 8888        ,88' 8 8888        8b   `8.`8888. `8 8888       .8' 8 8888 `8b.      8 8888 8 8888             8 8888        8 8888 `8 8888       ,8P  8      `Y8o. `Y8
#   8 8888    ,o88P'   8 8888        `8b.  ;8.`8888    8888     ,88'  8 8888   `8b.    8 8888 8 8888             8 8888        8 8888  ` 8888     ,88'   8         `Y8o.`
#   8 888888888P'      8 888888888888 `Y8888P ,88P'     `8888888P'    8 8888     `88.  8 8888 8 8888             8 8888        8 8888     `8888888P'     8            `Yo
Description: This is Stack 04 of Cloud Engineering\Cloud Automation Concepts\Assessment 01 | WebStack | This stack deploys a load-balanced autoscaling high-available web environment serving the Broad COVID-19 dashboard 










#   8 888888888o.   8 8888888888     d888888o.       ,o888888o.     8 8888      88 8 888888888o.      ,o888888o.    8 8888888888     d888888o.
#   8 8888    `88.  8 8888         .`8888:' `88.  . 8888     `88.   8 8888      88 8 8888    `88.    8888     `88.  8 8888         .`8888:' `88.
#   8 8888     `88  8 8888         8.`8888.   Y8 ,8 8888       `8b  8 8888      88 8 8888     `88 ,8 8888       `8. 8 8888         8.`8888.   Y8
#   8 8888     ,88  8 8888         `8.`8888.     88 8888        `8b 8 8888      88 8 8888     ,88 88 8888           8 8888         `8.`8888.
#   8 8888.   ,88'  8 888888888888  `8.`8888.    88 8888         88 8 8888      88 8 8888.   ,88' 88 8888           8 888888888888  `8.`8888.
#   8 888888888P'   8 8888           `8.`8888.   88 8888         88 8 8888      88 8 888888888P'  88 8888           8 8888           `8.`8888.
#   8 8888`8b       8 8888            `8.`8888.  88 8888        ,8P 8 8888      88 8 8888`8b      88 8888           8 8888            `8.`8888.
#   8 8888 `8b.     8 8888        8b   `8.`8888. `8 8888       ,8P  ` 8888     ,8P 8 8888 `8b.    `8 8888       .8' 8 8888        8b   `8.`8888.
#   8 8888   `8b.   8 8888        `8b.  ;8.`8888  ` 8888     ,88'     8888   ,d8P  8 8888   `8b.     8888     ,88'  8 8888        `8b.  ;8.`8888
#   8 8888     `88. 8 888888888888 `Y8888P ,88P'     `8888888P'        `Y88888P'   8 8888     `88.    `8888888P'    8 888888888888 `Y8888P ,88P'
Resources: 

  #DO = Dependent on
  #Par = Parameter
  #Imp = Imported parameter

  #Description: This is a Security Group, this is used by the Launch Configuration for the AutoScaler group to settup the webservers and allows all incomming  
  #             tcp packets from port 80 (HTTP), port 443 (HTTPS) and port 22 (SSH), and allows all outgoing packets from all ports.
  CACAA1WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This security groups allows incoming connections to ports 80 (HTTP), 443 (HTTPS), 22 (SSH)
      GroupName: CACAA1WebSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue BaseStack:VPC                                   #Imp: BaseStack:VPC                       (The VPC imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA1WebSecurityGroup
    



  #Description: This is a Load Balancer, this is connected to the two Public subnets and load balances the auto scaled webservers in the public subnets.
  CACAA1ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: CACAA1ELB
      Type: application
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref CACAA1WebSecurityGroup                                     #DO: CACAA1WebSecurityGroup               (The security group for the Webservers)
      Subnets: 
        - !ImportValue BaseStack:PublicSubnet1                            #Imp: BaseStack:PublicSubnet1             (The first public subnet imported from the BaseStack)
        - !ImportValue BaseStack:PublicSubnet2                            #Imp: BaseStack:PublicSubnet2             (The second public subnet imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA1ELB

  #Description: This is a Load Balancer Target group, this is used by the load balancer HTTP listener and allows sets it up to received HTTP requests over port 80.
  CACAA1TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CACAA1TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue BaseStack:VPC                                   #Imp: BaseStack:VPC                       (The VPC imported from the BaseStack)
      Tags: 
        - Key: Name
          Value: CACAA1TargetGroup

   #Description: This is a Load Balancer listener, this receives the HTTP requests sent to the webservers via the load balancers DNS name and gives it to the Load balancer.
  CACAA1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref CACAA1TargetGroup                          #DO: CACAA1TargetGroup                    (The Load balancer Target group)
      LoadBalancerArn: !Ref CACAA1ELB                                     #DO: CACAA1ELB                            (The Load balancer)
      Port: 80
      Protocol: HTTP





  #Step 5. Create a launch configuration for the EC2 instances for autoscaling group
  #TODO: Change api endpoint substitution
  #We mount the EFS and create a directory named as the private IP of the server
  #Then we create a cron job that automatically synchronizes nginx log directory with the directory we created in EFS, it runs every day at midnight
  CACAA1WebserverLaunchConfiguration: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0947d2ba12ee1ff75 # Amazon Linux 2
      InstanceMonitoring: false # basic monitoring enabled
      InstanceType: t2.micro # For production change this to t3.large
      KeyName: CAC_Assignments
      LaunchConfigurationName: CACAA1WebserverLaunchConfiguration
      PlacementTenancy: default
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 30
            VolumeType: "gp2"
      SecurityGroups: 
        - !Ref CACAA1WebSecurityGroup                                     #DO: CACAA1WebSecurityGroup               (The security group for the Webservers)
      UserData:
        Fn::Base64:
          !Sub 
          - |
              #!/bin/bash
              sudo yum update -y
              sudo yum install git -y
              sudo amazon-linux-extras install nginx1 -y
              sudo systemctl start nginx
              git clone https://github.com/BFL-Psycho/cac-aa1-covid19-dashboard.git
              cd cac-aa1-covid19-dashboard/
              sed -i 's|let apiEndpoint = \"\";|let apiEndpoint = \"${CovidDataEndpointURL}\";|g' ./index.html
              sudo cp -r ./* /usr/share/nginx/html/
              sudo systemctl restart nginx
              sudo systemctl enable nginx
              mkdir ~/efs-mount-nginx-logs
              sudo yum install -y amazon-efs-utils
              sudo mount -t efs ${EFSFileSystemID}.efs.us-east-1.amazonaws.com:/ ~/efs-mount-nginx-logs
              cd ~/efs-mount-nginx-logs
              sudo chmod go+rw .
              mkdir `hostname -I`
              sudo touch /etc/cron.d/dailynginxlogsync
              sudo cd /etc/cron.d 
              sudo su
              sudo echo "0 0 * * * root /usr/bin/rsync -a /var/log/nginx /home/ec2-user/efs-mount-nginx-logs/`hostname -I`" >> dailynginxlogsync
          - EFSFileSystemID: 
              Fn::ImportValue:
                EFSStack:EFSFileSystem                                    #Imp: EFSStack:EFSFileSystem              (The EFSFileSystem imported from the EFSStack)
            CovidDataEndpointURL:
              Fn::ImportValue:
                DataLayerStack:CovidDataAPIEndpointURL                    #Imp: DataLayerStack:CovidDataAPIEndpointURL  (The API endpoint URL imported from the DataLayerStack)





  #Step 6. Create an autoscaling group
  CACAA1AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref CACAA1WebserverLaunchConfiguration    #DO: CACAA1WebserverLaunchConfiguration   (The Launch Configuration for the AutoScaler group to settup the webservers)
      MinSize: 2
      MaxSize: 6
      TargetGroupARNs: 
        - !Ref CACAA1TargetGroup                                          #DO: CACAA1TargetGroup                    (The Load balancer Target group)
      VPCZoneIdentifier:
        - !ImportValue BaseStack:PublicSubnet1                            #Imp: BaseStack:PublicSubnet1             (The first public subnet imported from the BaseStack)
        - !ImportValue BaseStack:PublicSubnet2                            #Imp: BaseStack:PublicSubnet2             (The second public subnet imported from the BaseStack)
      Tags:
        - Key: Name
          Value: AutoscaleWebserverCovidDashboard
          PropagateAtLaunch: true 





  #Step 7. Create scheduled actions to scale out between 6pm and 8pm Amsterdam time and scale back in after that with daily recurrance
  CACAA1AutoscalingScheduledActionOut:
    Type: AWS::AutoScaling::ScheduledAction
    Properties: 
      AutoScalingGroupName: !Ref CACAA1AutoScalingGroup                   #DO: CACAA1AutoScalingGroup               (The AutoScalingGroup responsible for scaling the webserver)
      DesiredCapacity: 6
      MaxSize: 6
      MinSize: 2
      Recurrence: "0 22 * * *" # AWS uses UTC time, 18:00 Eastern time -> 22:00 UTC | Everyday scale out from 18:00

  CACAA1AutoscalingScheduledActionIn:
    Type: AWS::AutoScaling::ScheduledAction
    Properties: 
      AutoScalingGroupName: !Ref CACAA1AutoScalingGroup                   #DO: CACAA1AutoScalingGroup               (The AutoScalingGroup responsible for scaling the webserver)
      DesiredCapacity: 2
      MaxSize: 2
      MinSize: 2
      Recurrence: "0 0 * * *" # AWS uses UTC time, 20:00 Eastern time -> 00:00 UTC | Everyday scale in from 20:00









                                                                                                              
#       ,o888888o.     8 8888      88 8888888 8888888888 8 888888888o   8 8888      88 8888888 8888888888 d888888o.   
#    . 8888     `88.   8 8888      88       8 8888       8 8888    `88. 8 8888      88       8 8888     .`8888:' `88. 
#   ,8 8888       `8b  8 8888      88       8 8888       8 8888     `88 8 8888      88       8 8888     8.`8888.   Y8 
#   88 8888        `8b 8 8888      88       8 8888       8 8888     ,88 8 8888      88       8 8888     `8.`8888.     
#   88 8888         88 8 8888      88       8 8888       8 8888.   ,88' 8 8888      88       8 8888      `8.`8888.    
#   88 8888         88 8 8888      88       8 8888       8 888888888P'  8 8888      88       8 8888       `8.`8888.   
#   88 8888        ,8P 8 8888      88       8 8888       8 8888         8 8888      88       8 8888        `8.`8888.  
#   `8 8888       ,8P  ` 8888     ,8P       8 8888       8 8888         ` 8888     ,8P       8 8888    8b   `8.`8888. 
#    ` 8888     ,88'     8888   ,d8P        8 8888       8 8888           8888   ,d8P        8 8888    `8b.  ;8.`8888 
#       `8888888P'        `Y88888P'         8 8888       8 8888            `Y88888P'         8 8888     `Y8888P ,88P' 
Outputs:

  WebSecurityGroupRef:
    Description: Reference to the webservers' security group
    Value: !Ref CACAA1WebSecurityGroup                                    #DO: CACAA1WebSecurityGroup               (The security group for the Webservers)
    Export:
      Name: WebStack:WebSecurityGroup

  ELBRef:
    Description: Reference to the application load balancer
    Value: !Ref CACAA1ELB                                                 #DO: CACAA1ELB                            (The Load balancer)
    Export:
      Name: WebStack:ELB

  TargetGroupRef:
    Description: Reference to the target group
    Value: !Ref CACAA1TargetGroup                                         #DO: CACAA1TargetGroup                    (The Load balancer Target group)
    Export:
      Name: WebStack:TargetGroup

  ListenerRef:
    Description: Reference to the listener
    Value: !Ref CACAA1Listener                                            #DO: CACAA1ELB                            (The Load balancer listner)
    Export:
      Name: WebStack:Listener

  WebserverLaunchConfigurationRef:
    Description: Reference to the launch configuration for webservers
    Value: !Ref CACAA1WebserverLaunchConfiguration                        #DO: CACAA1WebserverLaunchConfiguration   (The Launch Configuration for the AutoScaler group to settup the webservers)
    Export:
      Name: WebStack:WebserverLaunchConfiguration

  AutoScalingGroupRef:
    Description: Reference to the autoscaling group for webservers
    Value: !Ref CACAA1AutoScalingGroup                                    #DO: CACAA1AutoScalingGroup               (The AutoScalingGroup responsible for scaling the webserver)
    Export:
      Name: WebStack:AutoScalingGroup

  AutoscalingScheduledActionOutRef:
    Description: Reference to the scaling out action
    Value: !Ref CACAA1AutoscalingScheduledActionOut                       #DO: CACAA1AutoscalingScheduledActionOut  (The AutoScaling schedualed action that makes the webservers scale out at the set time)
    Export:
      Name: WebStack:AutoscalingScheduledActionOut

  AutoscalingScheduledActionInRef:
    Description: Reference to the scaling in action
    Value: !Ref CACAA1AutoscalingScheduledActionIn                        #DO: CACAA1AutoscalingScheduledActionIn   (The AutoScaling schedualed action that makes the webservers scale in at the set time)
    Export:
      Name: WebStack:AutoscalingScheduledActionIn


  
  

  
