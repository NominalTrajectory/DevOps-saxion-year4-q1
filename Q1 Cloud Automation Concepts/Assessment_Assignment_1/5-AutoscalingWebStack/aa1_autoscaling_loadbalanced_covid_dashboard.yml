# Ivan Shishkalov | Cloud Automation Concepts | Assessment Assignment 1
Description: This stack deploys a load-balanced autoscaling high-available web environment serving the Broad COVID-19 dashboard 


Resources: 

  #Step 1. Create a security group for the webservers
  CACAA1WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This security groups allows incoming connections to ports 80 (HTTP), 443 (HTTPS), 22 (SSH)
      GroupName: CACAA1WebSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: CACAA1WebSecurityGroup
      VpcId: !ImportValue BaseStack:VPC
    
  #Step 2. Create an application load balancer 
  CACAA1ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: CACAA1ELB
      Type: application
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref CACAA1WebSecurityGroup
      Subnets: 
        - !ImportValue BaseStack:PublicSubnet1
        - !ImportValue BaseStack:PublicSubnet2
      Tags: 
        - Key: Name
          Value: CACAA1ELB

  #Step 3. Create a target group (initially it's empty, but will be populated by an autoscaling group)
  CACAA1TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CACAA1TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue BaseStack:VPC
      Tags: 
        - Key: Name
          Value: CACAA1TargetGroup
  
  #Step 4. Create an HTTP Listener pointing to the target group
  CACAA1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref CACAA1TargetGroup
      LoadBalancerArn: !Ref CACAA1ELB
      Port: 80
      Protocol: HTTP

  #Step 5. Create a launch configuration for the EC2 instances for autoscaling group
  #TODO: Change api endpoint substitution
  #We mount the EFS and create a directory named as the private IP of the server
  #Then we create a cron job that automatically synchronizes nginx log directory with the directory we created in EFS, it runs every day at midnight
  CACAA1WebserverLaunchConfiguration: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0947d2ba12ee1ff75 # Amazon Linux 2
      InstanceMonitoring: false # basic monitoring enabled
      InstanceType: t2.micro # For production change this to t3.large
      KeyName: CAC_Assignments
      LaunchConfigurationName: CACAA1WebserverLaunchConfiguration
      PlacementTenancy: default
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 30
            VolumeType: "gp2"
      SecurityGroups: 
        - !Ref CACAA1WebSecurityGroup
      UserData:
        Fn::Base64:
          !Sub 
          - |
              #!/bin/bash
              sudo yum update -y
              sudo yum install git -y
              sudo amazon-linux-extras install nginx1 -y
              sudo systemctl start nginx
              git clone https://github.com/BFL-Psycho/cac-aa1-covid19-dashboard.git
              cd cac-aa1-covid19-dashboard/
              sed -i 's|let apiEndpoint = \"\";|let apiEndpoint = \"${CovidDataEndpointURL}\";|g' ./index.html
              sudo cp -r ./* /usr/share/nginx/html/
              sudo systemctl restart nginx
              sudo systemctl enable nginx
              mkdir ~/efs-mount-nginx-logs
              sudo yum install -y amazon-efs-utils
              sudo mount -t efs ${EFSFileSystemID}.efs.us-east-1.amazonaws.com:/ ~/efs-mount-nginx-logs
              cd ~/efs-mount-nginx-logs
              sudo chmod go+rw .
              mkdir `hostname -I`
              sudo touch /etc/cron.d/dailynginxlogsync
              sudo cd /etc/cron.d 
              sudo su
              sudo echo "0 0 * * * root /usr/bin/rsync -a /var/log/nginx /home/ec2-user/efs-mount-nginx-logs/`hostname -I`" >> dailynginxlogsync
          - EFSFileSystemID: 
              Fn::ImportValue:
                EFSStack:EFSFileSystem
            CovidDataEndpointURL:
              Fn::ImportValue:
                DataLayerStack:CovidDataAPIEndpointURL
           
  #Step 6. Create an autoscaling group
  CACAA1AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref CACAA1WebserverLaunchConfiguration
      MinSize: 2
      MaxSize: 6
      TargetGroupARNs: 
        - !Ref CACAA1TargetGroup
      VPCZoneIdentifier:
        - !ImportValue BaseStack:PublicSubnet1
        - !ImportValue BaseStack:PublicSubnet2
    Tags:
      - Key: Name
        Value: AutoscaleWebserverCovidDashboard
        PropagateAtLaunch: true 


  #Step 7. Create scheduled actions to scale out between 6pm and 8pm Amsterdam time and scale back in after that with daily recurrance
  CACAA1AutoscalingScheduledActionOut:
    Type: AWS::AutoScaling::ScheduledAction
    Properties: 
      AutoScalingGroupName: !Ref CACAA1AutoScalingGroup
      DesiredCapacity: 6
      MaxSize: 6
      MinSize: 2
      Recurrence: "0 22 * * *" # AWS uses UTC time, 18:00 Eastern time -> 22:00 UTC | Everyday scale out from 18:00

  CACAA1AutoscalingScheduledActionIn:
    Type: AWS::AutoScaling::ScheduledAction
    Properties: 
      AutoScalingGroupName: !Ref CACAA1AutoScalingGroup
      DesiredCapacity: 2
      MaxSize: 2
      MinSize: 2
      Recurrence: "0 0 * * *" # AWS uses UTC time, 20:00 Eastern time -> 00:00 UTC | Everyday scale in from 20:00

Outputs:

  WebSecurityGroupRef:
    Description: Reference to the webservers' security group
    Value: !Ref CACAA1WebSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WebSecurityGroup ] ]

  ELBRef:
    Description: Reference to the application load balancer
    Value: !Ref CACAA1ELB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ELB ] ]

  TargetGroupRef:
    Description: Reference to the target group
    Value: !Ref CACAA1TargetGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", TargetGroup ] ]

  ListenerRef:
    Description: Reference to the listener
    Value: !Ref CACAA1Listener
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", Listener ] ]

  WebserverLaunchConfigurationRef:
    Description: Reference to the launch configuration for webservers
    Value: !Ref CACAA1WebserverLaunchConfiguration
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WebserverLaunchConfiguration ] ]

  AutoScalingGroupRef:
    Description: Reference to the autoscaling group for webservers
    Value: !Ref CACAA1AutoScalingGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AutoScalingGroup ] ]

  AutoscalingScheduledActionOutRef:
    Description: Reference to the scaling out action
    Value: !Ref CACAA1AutoscalingScheduledActionOut
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AutoscalingScheduledActionOut ] ]

  AutoscalingScheduledActionInRef:
    Description: Reference to the scaling in action
    Value: !Ref CACAA1AutoscalingScheduledActionIn
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AutoscalingScheduledActionIn ] ]


  
  

  
