#   8 888888888o.      8 8888888888     d888888o.       ,o888888o.    8 888888888o.    8 8888 8 888888888o 8888888 8888888888  8 8888     ,o888888o.     b.             8
#   8 8888    `^888.   8 8888         .`8888:' `88.    8888     `88.  8 8888    `88.   8 8888 8 8888    `88.     8 8888        8 8888  . 8888     `88.   888o.          8
#   8 8888        `88. 8 8888         8.`8888.   Y8 ,8 8888       `8. 8 8888     `88   8 8888 8 8888     `88     8 8888        8 8888 ,8 8888       `8b  Y88888o.       8
#   8 8888         `88 8 8888         `8.`8888.     88 8888           8 8888     ,88   8 8888 8 8888     ,88     8 8888        8 8888 88 8888        `8b .`Y888888o.    8
#   8 8888          88 8 888888888888  `8.`8888.    88 8888           8 8888.   ,88'   8 8888 8 8888.   ,88'     8 8888        8 8888 88 8888         88 8o. `Y888888o. 8
#   8 8888          88 8 8888           `8.`8888.   88 8888           8 888888888P'    8 8888 8 888888888P'      8 8888        8 8888 88 8888         88 8`Y8o. `Y88888o8
#   8 8888         ,88 8 8888            `8.`8888.  88 8888           8 8888`8b        8 8888 8 8888             8 8888        8 8888 88 8888        ,8P 8   `Y8o. `Y8888
#   8 8888        ,88' 8 8888        8b   `8.`8888. `8 8888       .8' 8 8888 `8b.      8 8888 8 8888             8 8888        8 8888 `8 8888       ,8P  8      `Y8o. `Y8
#   8 8888    ,o88P'   8 8888        `8b.  ;8.`8888    8888     ,88'  8 8888   `8b.    8 8888 8 8888             8 8888        8 8888  ` 8888     ,88'   8         `Y8o.`
#   8 888888888P'      8 888888888888 `Y8888P ,88P'     `8888888P'    8 8888     `88.  8 8888 8 8888             8 8888        8 8888     `8888888P'     8            `Yo
Description: This is Stack 05 of Cloud Engineering\Cloud Automation Concepts\Assessment 01 | ElkStack | This CloudFormation stack deploys the ELK stack for log aggregation and alalytics.










#   8 888888888o      .8.          8 888888888o.            .8.                   ,8.       ,8.          8 8888888888 8888888 8888888888 8 8888888888   8 888888888o.     d888888o.
#   8 8888    `88.   .888.         8 8888    `88.          .888.                 ,888.     ,888.         8 8888             8 8888       8 8888         8 8888    `88.  .`8888:' `88.
#   8 8888     `88  :88888.        8 8888     `88         :88888.               .`8888.   .`8888.        8 8888             8 8888       8 8888         8 8888     `88  8.`8888.   Y8
#   8 8888     ,88 . `88888.       8 8888     ,88        . `88888.             ,8.`8888. ,8.`8888.       8 8888             8 8888       8 8888         8 8888     ,88  `8.`8888.
#   8 8888.   ,88'.8. `88888.      8 8888.   ,88'       .8. `88888.           ,8'8.`8888,8^8.`8888.      8 888888888888     8 8888       8 888888888888 8 8888.   ,88'   `8.`8888.
#   8 888888888P'.8`8. `88888.     8 888888888P'       .8`8. `88888.         ,8' `8.`8888' `8.`8888.     8 8888             8 8888       8 8888         8 888888888P'     `8.`8888.
#   8 8888      .8' `8. `88888.    8 8888`8b          .8' `8. `88888.       ,8'   `8.`88'   `8.`8888.    8 8888             8 8888       8 8888         8 8888`8b          `8.`8888.
#   8 8888     .8'   `8. `88888.   8 8888 `8b.       .8'   `8. `88888.     ,8'     `8.`'     `8.`8888.   8 8888             8 8888       8 8888         8 8888 `8b.    8b   `8.`8888.
#   8 8888    .888888888. `88888.  8 8888   `8b.    .888888888. `88888.   ,8'       `8        `8.`8888.  8 8888             8 8888       8 8888         8 8888   `8b.  `8b.  ;8.`8888
#   8 8888   .8'       `8. `88888. 8 8888     `88. .8'       `8. `88888. ,8'         `         `8.`8888. 8 888888888888     8 8888       8 888888888888 8 8888     `88. `Y8888P ,88P'
Parameters:

  AWSAccessKeyId:
    Description: Please enter
    Type: String
  AWSSecretAccessKey:
    Description: Please enter
    Type: String
  AWSSessionToken:
    Description: Please enter
    Type: String









#   8 888888888o.   8 8888888888     d888888o.       ,o888888o.     8 8888      88 8 888888888o.      ,o888888o.    8 8888888888     d888888o.
#   8 8888    `88.  8 8888         .`8888:' `88.  . 8888     `88.   8 8888      88 8 8888    `88.    8888     `88.  8 8888         .`8888:' `88.
#   8 8888     `88  8 8888         8.`8888.   Y8 ,8 8888       `8b  8 8888      88 8 8888     `88 ,8 8888       `8. 8 8888         8.`8888.   Y8
#   8 8888     ,88  8 8888         `8.`8888.     88 8888        `8b 8 8888      88 8 8888     ,88 88 8888           8 8888         `8.`8888.
#   8 8888.   ,88'  8 888888888888  `8.`8888.    88 8888         88 8 8888      88 8 8888.   ,88' 88 8888           8 888888888888  `8.`8888.
#   8 888888888P'   8 8888           `8.`8888.   88 8888         88 8 8888      88 8 888888888P'  88 8888           8 8888           `8.`8888.
#   8 8888`8b       8 8888            `8.`8888.  88 8888        ,8P 8 8888      88 8 8888`8b      88 8888           8 8888            `8.`8888.
#   8 8888 `8b.     8 8888        8b   `8.`8888. `8 8888       ,8P  ` 8888     ,8P 8 8888 `8b.    `8 8888       .8' 8 8888        8b   `8.`8888.
#   8 8888   `8b.   8 8888        `8b.  ;8.`8888  ` 8888     ,88'     8888   ,d8P  8 8888   `8b.     8888     ,88'  8 8888        `8b.  ;8.`8888
#   8 8888     `88. 8 888888888888 `Y8888P ,88P'     `8888888P'        `Y88888P'   8 8888     `88.    `8888888P'    8 888888888888 `Y8888P ,88P'
Resources:

  #Resources for ELK stack
  #For the purpose of this assignment (and to save credits) a siplified configuration will be used
  #ELK stack will run on a single EC2 instance and won't be configured for high availability

  #Description: This is a Security Group, this is used by the ELK instance and allows all incomming tcp packets from port 80 (HTTP), port 443 (HTTPS), port 22 (SSH) and 5601 (Kibana) 
  #             and allows all outgoing packets from all ports.
  CACAA1ELKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This security is for ELK stack, allows connection to 80, 443, 22 and 5601 (Kibana)
      GroupName: CACAA1ELKSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: CACAA1ELKSecurityGroup
      VpcId: !ImportValue BaseStack:VPC




  #Description: This is a IAM role, it is used by the EC2 instance that hosts the ELK related services.
  CACAA1FunctionbeatLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations #To be able to create a network interface for a VPC
      RoleName: CACAA1FunctionbeatLambdaRole






  #Description: This is a EC2 instance, this instance is resposible for hosting the relavent ELK services wich include Elasticsearch, Logstash and Kibana.
  #             The currect settup monitors the CACAA1MongoDBDataRetriever Lambda function.
  CACAA1ELKInstance: 
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.large
      ImageId: ami-0817d428a6fb68645 #Ubuntu 18.04
      SubnetId: !ImportValue BaseStack:PublicSubnet1
      KeyName: CAC_Assignments
      SecurityGroupIds: 
        - !GetAtt CACAA1ELKSecurityGroup.GroupId
      UserData: #latest: elasticsearch throwing exception / use newer guide maybe containers?
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            sudo apt update
            sudo apt upgrade -y
            sudo apt-get install openjdk-8-jdk -y
            sudo apt-get install nginx -y
            wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
            sudo apt-get install apt-transport-https -y
            echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
            sudo apt-get update
            sudo apt-get install elasticsearch -y
            sudo chown -R ubuntu:ubuntu /etc/elasticsearch
            PIP=$(echo `hostname -I` | sed 's/ //g') && echo "network.host: `echo $PIP`">>/etc/elasticsearch/elasticsearch.yml
            echo "http.port: 9200" >> /etc/elasticsearch/elasticsearch.yml
            echo "discovery.type: single-node" >> /etc/elasticsearch/elasticsearch.yml
            sudo chown -R elasticsearch:elasticsearch /etc/elasticsearch/
            sudo systemctl start elasticsearch.service
            sudo systemctl enable elasticsearch.service
            sudo apt-get install kibana -y
            sudo chown -R ubuntu:ubuntu /etc/kibana/
            echo "server.port: 5601" >> /etc/kibana/kibana.yml
            echo "server.host: \"0.0.0.0\"" >> /etc/kibana/kibana.yml
            PIP=$(echo `hostname -I` | sed 's/ //g') && echo "elasticsearch.hosts: [\"http://`echo $PIP`:9200\"]">>/etc/kibana/kibana.yml
            sudo chown -R kibana:kibana /etc/kibana/
            sudo systemctl start kibana
            sudo systemctl enable kibana
            sudo ufw allow 5601/tcp
            sudo apt-get install logstash -y
            sudo systemctl start logstash
            sudo systemctl enable logstash
            curl -L -O https://artifacts.elastic.co/downloads/beats/functionbeat/functionbeat-7.9.3-linux-x86_64.tar.gz
            tar xzvf functionbeat-7.9.3-linux-x86_64.tar.gz
            sudo apt-get install git -y
            git clone https://github.com/BFL-Psycho/cac-aa1-configfiles.git
            rm ./functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            cp ./cac-aa1-configfiles/functionbeat.yml ./functionbeat-7.9.3-linux-x86_64
            PIP=$(echo `hostname -I` | sed 's/ //g') && sed -i "s|localhost|$PIP|g" ./functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            sed -i 's|<role_arn>|${CACAA1FunctionbeatLambdaRole.Arn}|g' ./functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            sed -i 's|<custom_security_group_id>|${LambdaVPCSecurityGroup}|g' ./functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            sed -i 's|<custom_subnet_id_1>|${PublicSubnet1}|g' ./functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            sed -i 's|<custom_subnet_id_2>|${PublicSubnet2}|g' ./functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            sudo chmod go-w /home/ubuntu/functionbeat-7.9.3-linux-x86_64/functionbeat.yml
            sudo apt-get install awscli -y
            aws configure set region "us-east-1"
            aws configure set output "yaml"
            aws configure set aws_access_key_id ${AWSAccessKeyId}
            aws configure set aws_secret_access_key ${AWSSecretAccessKey}
            aws configure set aws_session_token ${AWSSessionToken}
            cd functionbeat-7.9.3-linux-x86_64
            ./functionbeat deploy fn-cloudwatch-logs
          - LambdaVPCSecurityGroup:
              Fn::ImportValue:
                DataLayerStack:LambdaVPCSecurityGroup
            PublicSubnet1:
              Fn::ImportValue:
                BaseStack:PublicSubnet1
            PublicSubnet2:
              Fn::ImportValue:
                BaseStack:PublicSubnet2
                    
      Tags:
        - Key: Name
          Value: CACAA1ELKInstance

  








                                                                                                              
#       ,o888888o.     8 8888      88 8888888 8888888888 8 888888888o   8 8888      88 8888888 8888888888 d888888o.   
#    . 8888     `88.   8 8888      88       8 8888       8 8888    `88. 8 8888      88       8 8888     .`8888:' `88. 
#   ,8 8888       `8b  8 8888      88       8 8888       8 8888     `88 8 8888      88       8 8888     8.`8888.   Y8 
#   88 8888        `8b 8 8888      88       8 8888       8 8888     ,88 8 8888      88       8 8888     `8.`8888.     
#   88 8888         88 8 8888      88       8 8888       8 8888.   ,88' 8 8888      88       8 8888      `8.`8888.    
#   88 8888         88 8 8888      88       8 8888       8 888888888P'  8 8888      88       8 8888       `8.`8888.   
#   88 8888        ,8P 8 8888      88       8 8888       8 8888         8 8888      88       8 8888        `8.`8888.  
#   `8 8888       ,8P  ` 8888     ,8P       8 8888       8 8888         ` 8888     ,8P       8 8888    8b   `8.`8888. 
#    ` 8888     ,88'     8888   ,d8P        8 8888       8 8888           8888   ,d8P        8 8888    `8b.  ;8.`8888 
#       `8888888P'        `Y88888P'         8 8888       8 8888            `Y88888P'         8 8888     `Y8888P ,88P' 
Outputs:

  #Description: This outputs a reference to the SecurityGroup used by the EC2 Instance that hosts the ELK services.
  #This value is used in the stacks:
  # -
  ELKSecurityGroupRef:
    Description: Reference to the security group for ELK instances
    Value: !Ref CACAA1ELKSecurityGroup
    Export:
      Name: ElkStack:ELKSecurityGroup

  #Description: This outputs a reference to the EC2 Instance that hosts the ELK services.
  #This value is used in the stacks:
  # -
  ELKInstanceRef:
    Description: Reference to the ELK instance
    Value: !Ref CACAA1ELKInstance
    Export:
      Name: ElkStack:ELKInstanceRef


